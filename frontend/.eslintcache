[{"/Users/gamemaster/Documents/Projects/custom_image_classification/frontend/src/index.js":"1","/Users/gamemaster/Documents/Projects/custom_image_classification/frontend/src/reportWebVitals.js":"2","/Users/gamemaster/Documents/Projects/custom_image_classification/frontend/src/main.js":"3","/Users/gamemaster/Documents/Projects/custom_image_classification/frontend/src/pages/Image_Classification/index.js":"4","/Users/gamemaster/Documents/Projects/custom_image_classification/frontend/src/pages/Image_Classification/CICG/CICG.tsx":"5","/Users/gamemaster/Documents/Projects/custom_image_classification/frontend/src/pages/Image_Classification/CICG/components/evaluate.js":"6","/Users/gamemaster/Documents/Projects/custom_image_classification/frontend/src/pages/Image_Classification/CICG/components/addClass.js":"7","/Users/gamemaster/Documents/Projects/custom_image_classification/frontend/src/pages/Image_Classification/CICG/components/train.js":"8","/Users/gamemaster/Documents/Projects/custom_image_classification/frontend/src/pages/Image_Classification/CICG/components/class.js":"9","/Users/gamemaster/Documents/Projects/custom_image_classification/frontend/src/pages/Image_Classification/CICG/components/dragAndDrop.js":"10","/Users/gamemaster/Documents/Projects/custom_image_classification/frontend/src/pages/Image_Classification/DogCat/App.js":"11","/Users/gamemaster/Documents/Projects/custom_image_classification/frontend/src/pages/Image_Classification/RickMorty/App.js":"12","/Users/gamemaster/Documents/Projects/custom_image_classification/frontend/src/pages/Object_Detection/App.js":"13","/Users/gamemaster/Documents/Projects/custom_image_classification/frontend/src/Axios.ts":"14","/Users/gamemaster/Documents/Projects/MegaMLProject/frontend/src/index.js":"15","/Users/gamemaster/Documents/Projects/MegaMLProject/frontend/src/main.js":"16","/Users/gamemaster/Documents/Projects/MegaMLProject/frontend/src/reportWebVitals.js":"17","/Users/gamemaster/Documents/Projects/MegaMLProject/frontend/src/pages/Object_Detection/App.js":"18","/Users/gamemaster/Documents/Projects/MegaMLProject/frontend/src/pages/Image_Classification/index.js":"19","/Users/gamemaster/Documents/Projects/MegaMLProject/frontend/src/pages/Image_Classification/DogCat/App.js":"20","/Users/gamemaster/Documents/Projects/MegaMLProject/frontend/src/pages/Image_Classification/RickMorty/App.js":"21","/Users/gamemaster/Documents/Projects/MegaMLProject/frontend/src/pages/Image_Classification/CICG/CICG.tsx":"22","/Users/gamemaster/Documents/Projects/MegaMLProject/frontend/src/Axios.ts":"23","/Users/gamemaster/Documents/Projects/MegaMLProject/frontend/src/pages/Image_Classification/CICG/components/class.js":"24","/Users/gamemaster/Documents/Projects/MegaMLProject/frontend/src/pages/Image_Classification/CICG/components/train.js":"25","/Users/gamemaster/Documents/Projects/MegaMLProject/frontend/src/pages/Image_Classification/CICG/components/addClass.js":"26","/Users/gamemaster/Documents/Projects/MegaMLProject/frontend/src/pages/Image_Classification/CICG/components/evaluate.js":"27","/Users/gamemaster/Documents/Projects/MegaMLProject/frontend/src/pages/Image_Classification/CICG/components/dragAndDrop.js":"28"},{"size":1251,"mtime":1609964275992,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":1607766302517,"results":"31","hashOfConfig":"30"},{"size":3044,"mtime":1609945256539,"results":"32","hashOfConfig":"30"},{"size":3172,"mtime":1609944577104,"results":"33","hashOfConfig":"30"},{"size":7722,"mtime":1609959500980,"results":"34","hashOfConfig":"30"},{"size":6050,"mtime":1609959570675,"results":"35","hashOfConfig":"30"},{"size":540,"mtime":1609910830401,"results":"36","hashOfConfig":"30"},{"size":2450,"mtime":1609910797266,"results":"37","hashOfConfig":"30"},{"size":8424,"mtime":1609910895987,"results":"38","hashOfConfig":"30"},{"size":1756,"mtime":1607843638192,"results":"39","hashOfConfig":"30"},{"size":8147,"mtime":1609963732192,"results":"40","hashOfConfig":"30"},{"size":8181,"mtime":1609961953740,"results":"41","hashOfConfig":"30"},{"size":6146,"mtime":1610009895615,"results":"42","hashOfConfig":"30"},{"size":120,"mtime":1609959610270,"results":"43","hashOfConfig":"30"},{"size":1251,"mtime":1609964275992,"results":"44","hashOfConfig":"45"},{"size":3044,"mtime":1609945256539,"results":"46","hashOfConfig":"45"},{"size":362,"mtime":1607766302517,"results":"47","hashOfConfig":"45"},{"size":6146,"mtime":1610009895615,"results":"48","hashOfConfig":"45"},{"size":3172,"mtime":1609944577104,"results":"49","hashOfConfig":"45"},{"size":8147,"mtime":1609963732192,"results":"50","hashOfConfig":"45"},{"size":8181,"mtime":1609961953740,"results":"51","hashOfConfig":"45"},{"size":7722,"mtime":1609959500980,"results":"52","hashOfConfig":"45"},{"size":120,"mtime":1609959610270,"results":"53","hashOfConfig":"45"},{"size":8424,"mtime":1609910895987,"results":"54","hashOfConfig":"45"},{"size":2450,"mtime":1609910797266,"results":"55","hashOfConfig":"45"},{"size":540,"mtime":1609910830401,"results":"56","hashOfConfig":"45"},{"size":6050,"mtime":1609959570675,"results":"57","hashOfConfig":"45"},{"size":1756,"mtime":1607843638192,"results":"58","hashOfConfig":"45"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"17cc6k",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"61"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"61"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"61"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"61"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"61"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"dfgou",{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/gamemaster/Documents/Projects/custom_image_classification/frontend/src/index.js",[],["124","125"],"/Users/gamemaster/Documents/Projects/custom_image_classification/frontend/src/reportWebVitals.js",[],"/Users/gamemaster/Documents/Projects/custom_image_classification/frontend/src/main.js",[],"/Users/gamemaster/Documents/Projects/custom_image_classification/frontend/src/pages/Image_Classification/index.js",[],"/Users/gamemaster/Documents/Projects/custom_image_classification/frontend/src/pages/Image_Classification/CICG/CICG.tsx",["126"],"import React, { useState } from 'react';\nimport Axios from '../../../Axios';\nimport Class from './components/class';\nimport AddClass from './components/addClass';\nimport Train from './components/train';\nimport Evaluate from './components/evaluate';\nimport { makeStyles, Grid, Snackbar, Modal, Typography, Button, Divider, LinearProgress } from '@material-ui/core';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport './App.css';\n\nfunction Alert(props: any) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: '300px',\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n  trainButton: {\n    backgroundColor: '#4285F4',\n    borderRadius: '0px',\n    color: '#fff',\n    width: '50%',\n    textTransform: 'none',\n    '&:hover': {\n      backgroundColor: '#4285F4',\n    }\n  },\n  cancelButton: {\n    backgroundColor: '#ff6c5c',\n    borderRadius: '0px',\n    color: '#fff',\n    width: '50%',\n    textTransform: 'none',\n    '&:hover': {\n      backgroundColor: '#ff6c5c',\n    }\n  },\n  divider: {\n    backgroundColor: '#000',\n    height: '2px',\n  },\n  training: {\n    padding: '20px',\n  },\n}));\n\nfunction Cicg() {\n  const classes = useStyles();\n\n  const [errorSnackBarOpen, setErrorSnackBarOpen] = useState(false);\n  const [errorMsg,setErrorMsg] = useState(\"Each class should containes atleast one Image\");\n  const [successSnackBarOpen, setSuccessSnackBarOpen] = useState(false);\n  const [trainModelOpen, setTrainModelOpen] = useState(false);\n  const [modalStyle] = useState(getModalStyle);\n  const [epochs, setEpochs] = useState(25);\n  const [thumbnail, setThumbnail] = useState();\n  const [ istraining , setIstraining ] = useState(false);\n  const [ canEvaluate, setCanEvaluate ] = useState(false);\n\n  const [Classes, setClasses] = useState([\n    {\n      id: 1,\n      name: \"class 1\",\n      images_no: 0,\n      images: [],\n    },\n    {\n      id: 2,\n      name: \"class 2\",\n      images_no: 0,\n      images: [],\n    }\n  ])\n\n  const handleErrorClose = (event: any, reason: any) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setErrorSnackBarOpen(false);\n  };\n\n  const handleSuccessClose = (event: any, reason: any) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setSuccessSnackBarOpen(false);\n  };\n\n  const handleTrain = () => {\n\n    setTrainModelOpen(false);\n    setIstraining(true);\n\n    let reqBody = new FormData();\n\n    reqBody.append('epochs', epochs.toString());\n\n    for (var j = 0; j < Classes.length; j++) {\n      for (let key in Classes[j]) {\n        if (key !== 'images') {\n          reqBody.append((j + 1).toString() + \"_\" + key, (Classes[j] as any)[key]);\n        }\n        else {\n          for (var i = 0; i < Classes[j][key].length; i++) {\n            reqBody.append((j + 1).toString() + \"_\" + (i + 1).toString(), Classes[j][key][i]);\n          }\n        }\n      }\n    }\n\n    Axios.post('/api/custom/train', reqBody, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    })\n      .then(res => {\n\n        setIstraining(false);\n        setSuccessSnackBarOpen(true);\n        setCanEvaluate(true);\n\n        if (res.status === 200) {\n          console.log(\"Sucessfully trained the model :)\");\n        }\n        else {\n          setErrorMsg(\"Unable to Train the Model due to Server Side Issues\");\n          setErrorSnackBarOpen(true);\n          console.log(\"Failed to train the model :(\");\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        setIstraining(false);\n        setErrorMsg(\"Unable to Train the Model due to Server Side Issues\");\n        setErrorSnackBarOpen(true);\n      })\n  }\n\n  const modelBody = () => {\n    let no_of_classes = 0;\n    let no_of_images = 0;\n    Classes.map((itemi) => {\n      no_of_classes = no_of_classes + 1;\n      no_of_images = no_of_images + itemi.images_no;\n    })\n    return (\n      <div style={modalStyle} className={classes.paper}>\n        <Typography align=\"center\" variant=\"h6\">INFORMATION</Typography>\n        <Divider className={classes.divider} />\n        <div style={{ height: \"20px\" }}></div>\n        <Grid container spacing={0}>\n          <Grid item xs={8}>\n            <Typography variant=\"overline\">Total Classes</Typography>\n          </Grid>\n          <Grid item xs={4}>\n            <Typography align=\"center\" variant=\"body2\">{no_of_classes}</Typography>\n          </Grid>\n        </Grid>\n        <Grid container spacing={0}>\n          <Grid item xs={8}>\n            <Typography variant=\"overline\">Total Images</Typography>\n          </Grid>\n          <Grid item xs={4}>\n            <Typography align=\"center\" variant=\"body2\">{no_of_images}</Typography>\n          </Grid>\n        </Grid>\n        <Grid container spacing={0}>\n          <Grid item xs={8}>\n            <Typography variant=\"overline\">Epochs</Typography>\n          </Grid>\n          <Grid item xs={4}>\n            <Typography align=\"center\" variant=\"body2\">{epochs}</Typography>\n          </Grid>\n        </Grid>\n        <div style={{ height: \"50px\" }}></div>\n        <Button variant=\"text\" className={classes.trainButton} onClick={() => { handleTrain() }} >Train</Button>\n        <Button variant=\"text\" className={classes.cancelButton} onClick={() => { setTrainModelOpen(false); }} >Cancel</Button>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <Grid container spacing={8}>\n        <Grid item xs={5}>\n          <div className=\"classesSection\">\n            {Classes.map(item => (\n              <Class key={item.id} item={item} Classes={Classes} setClasses={setClasses} />\n            ))}\n            <AddClass Classes={Classes} setClasses={setClasses} />\n          </div>\n        </Grid>\n        <Grid item xs={3}>\n          <div style={{ height: \"100%\", width: '100%', position: 'relative' }}>\n            <Train Classes={Classes} setErrorMsg={setErrorMsg} setCanEvaluate={setCanEvaluate} setErrorSnackBarOpen={setErrorSnackBarOpen} setTrainModelOpen={setTrainModelOpen} epochs={epochs} setEpochs={setEpochs} />\n          </div>\n        </Grid>\n        <Grid item xs={3}>\n          <div style={{ height: \"100%\", width: '100%', position: 'relative' }}>\n            <Evaluate thumbnail={thumbnail} setThumbnail={setThumbnail} canEvaluate={canEvaluate} setErrorMsg={setErrorMsg} setErrorSnackBarOpen={setErrorSnackBarOpen}/>\n          </div>\n        </Grid>\n      </Grid>\n      <Modal\n        open={trainModelOpen}\n        onClose={() => { setTrainModelOpen(false); }}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      >\n        {modelBody()}\n      </Modal>\n      <Modal\n        open={istraining}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      >\n        <div style={modalStyle} className={classes.paper}>\n        <Typography variant=\"overline\" className={classes.training}>Model is Training Please wait.</Typography>\n        <LinearProgress />\n        </div>\n      </Modal>\n      <Snackbar open={errorSnackBarOpen} autoHideDuration={3000} onClose={handleErrorClose}>\n        <Alert onClose={handleErrorClose} severity=\"error\">\n          {errorMsg}\n        </Alert>\n      </Snackbar>\n      <Snackbar open={successSnackBarOpen} autoHideDuration={3000} onClose={handleSuccessClose}>\n        <Alert onClose={handleSuccessClose} severity=\"success\">\n          Model is Successfully Trained.\n        </Alert>\n      </Snackbar>\n\n    </div>\n  );\n}\n\nexport default Cicg;",["127","128"],"/Users/gamemaster/Documents/Projects/custom_image_classification/frontend/src/pages/Image_Classification/CICG/components/evaluate.js",["129"],"import { Button, makeStyles, Paper, Typography, Divider } from '@material-ui/core';\nimport React, { useState, useEffect, useRef } from 'react';\nimport Axios from '../../../../Axios';\nimport './train.css';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        padding: '20px',\n        width: '80%',\n        margin: 'auto',\n    },\n    evaluateButton_enabled: {\n        backgroundColor: '#4285F4',\n        color: '#fff',\n        width: '80%',\n        textTransform: 'none',\n        '&:hover': {\n            backgroundColor: '#4285F4',\n        }\n    },\n    evaluateButton_disabled: {\n        backgroundColor: '#D3D3D3',\n        width: '80%',\n        textTransform: 'none',\n    },\n    classNames: {\n        paddingRight: '20px',\n    }\n}));\n\nconst Evaluate = ({ thumbnail, setThumbnail, canEvaluate, setErrorMsg, setErrorSnackBarOpen }) => {\n    const classes = useStyles();\n    const [isDisplayInfo, setIsDisplayInfo] = useState(false);\n    const [info, setInfo] = useState();\n\n    const handleFileUpload = (e) => {\n        setThumbnail(e.target.files[0]);\n    }\n\n    const imageRef = useRef(null);\n\n    useEffect(() => {\n        if (canEvaluate === false)\n        {\n            setIsDisplayInfo(false);\n        }\n    }, [canEvaluate])\n\n    useEffect(() => {\n        if (!!thumbnail) {\n            let reader = new FileReader();\n\n            reader.onload = (e) => {\n                imageRef.current.src = e.target.result;\n            }\n\n            reader.readAsDataURL(thumbnail);\n        }\n    }, [thumbnail])\n\n    const handleEvaluate = () => {\n\n        setIsDisplayInfo(false);\n\n        if (thumbnail) {\n            let reqBody = new FormData();\n            reqBody.append('image', thumbnail);\n\n            Axios.post('/api/custom/evaluate', reqBody, {\n                headers: {\n                    \"Content-Type\": \"multipart/form-data\"\n                }\n            })\n                .then(res => {\n\n                    console.log(res)\n\n                    if (res.status === 200) {\n                        if (res.data['result'] && res.data['result'] === '0') {\n                            setErrorMsg('Unable to Evaluate the Model. Please Train the Model again.');\n                            setErrorSnackBarOpen(true);\n                            console.log('lost class names. Train the Model again.');\n                        }\n                        else {\n                            setInfo(res.data);\n                            setIsDisplayInfo(true);\n                            console.log(\"Sucessfully evaluated :)\");\n                        }\n                    }\n                    else {\n                        setErrorMsg('Unable to Evaluate the Model. Please Train the Model again.');\n                        setErrorSnackBarOpen(true);\n                        console.log(\"Failed to evaluate :(\");\n                    }\n                })\n                .catch(err => {\n                    setErrorMsg('Unable to Evaluate the Model. Please Train the Model again.');\n                    setErrorSnackBarOpen(true);\n                    console.log(err);\n                })\n        }\n        else {\n            setErrorMsg('Choose image for evaluation.');\n            setErrorSnackBarOpen(true);\n        }\n\n    }\n\n    useEffect(() => {\n        if (isDisplayInfo === true) {\n            let container1 = document.getElementById('classNamesContainer');\n            let container2 = document.getElementById('scoresContainer');\n            for (let key in info) {\n                if (key !== 'result') {\n                    container1.innerHTML += '<div>' + key + '</div>';\n                    container2.innerHTML += '<div>' + info[key] + '</div>';\n                }\n            }\n        }\n    }, [isDisplayInfo])\n\n    const display_info = () => {\n        if (isDisplayInfo === true) {\n            return (\n                <div>\n                    <div style={{ height: \"30px\" }}></div>\n                    <Divider />\n                    <div style={{ height: \"30px\" }}></div>\n                    <div id=\"infoContainer\" className=\"row\">\n                        <div id=\"classNamesContainer\" className=\"column1\"></div>\n                        <div id=\"scoresContainer\" className=\"column2\"></div>\n                    </div>\n                </div>\n            )\n        }\n        else{\n            return (\n                <div>\n                <div style={{ height: \"20px\" }}></div>\n                <Divider />\n                <div style={{ height: \"10px\" }}></div>\n                <div className=\"note\">You must train a model on left before you can evaluate it.</div>\n                </div>\n            )\n        }\n    }\n\n    return (\n        <div className=\"paperContainer\">\n            <Paper className={classes.paper} elevation={3}>\n                <Typography variant=\"h6\">Evaluation</Typography>\n                <Divider />\n                <div style={{ height: \"30px\" }}></div>\n                <div style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"center\"\n                }}>\n                    <input\n                        type='file'\n                        accept=\"image/*\"\n                        className='custom-file-input'\n                        id='customFile'\n                        onChange={handleFileUpload}\n                    />\n                    <div style={!thumbnail ? { display: \"none\" } : { marginTop: \"10px\" }}>\n                        <img src=\"#\" ref={imageRef} alt=\"\" width=\"100%\" height=\"100%\" />\n                    </div>\n                </div>\n                <div style={{ height: \"30px\" }}></div>\n                <div style={{textAlign:\"center\"}}>\n                <Button variant=\"outlined\" disabled={!canEvaluate} className={`${canEvaluate ? classes.evaluateButton_enabled : classes.evaluateButton_disabled}`} onClick={() => { handleEvaluate() }}>EVALUATE</Button>\n                </div>\n                {display_info()}\n            </Paper>\n        </div>\n    )\n}\n\nexport default Evaluate;","/Users/gamemaster/Documents/Projects/custom_image_classification/frontend/src/pages/Image_Classification/CICG/components/addClass.js",[],"/Users/gamemaster/Documents/Projects/custom_image_classification/frontend/src/pages/Image_Classification/CICG/components/train.js",["130"],"import { Button, Grid, makeStyles, Paper, Typography, Select, MenuItem } from '@material-ui/core';\nimport React from 'react';\nimport './train.css';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        padding: '20px',\n        width: '80%',\n        margin: 'auto',\n    },\n    trainButton: {\n        backgroundColor: '#4285F4',\n        color: '#fff',\n        width: '80%',\n        textTransform: 'none',\n        '&:hover': {\n            backgroundColor: '#4285F4',\n        }\n    }\n}));\n\nconst Train = ({ Classes, setErrorMsg, setCanEvaluate, setErrorSnackBarOpen, setTrainModelOpen, epochs, setEpochs }) => {\n    const classes = useStyles();\n\n    const handleTraining = () => {\n\n        setCanEvaluate(false);\n        let flag = 0;\n        Classes.map((itemi) => {\n            if (flag === 0 && itemi.images_no === 0) {\n                flag = 1;\n            }\n        });\n        if (flag === 1) {\n            setErrorMsg(\"Each class should containes atleast one Image\");\n            setErrorSnackBarOpen(true);\n        }\n        else {\n            setTrainModelOpen(true);\n        }\n    }\n\n    return (\n        <div className=\"paperContainer\">\n\n            <Paper className={classes.paper} elevation={3}>\n                <Typography variant=\"h6\">Training</Typography>\n                <div style={{ height: \"20px\" }}></div>\n                <Button variant=\"outlined\" className={classes.trainButton} onClick={() => { handleTraining(); }} >Train model</Button>\n                <div style={{ height: \"20px\" }}></div>\n                <Grid container spacing={0}>\n                    <Grid item xs={6}>\n                        <Typography variant=\"overline\">Epochs</Typography>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <Select\n                            labelId=\"demo-simple-select-label\"\n                            id=\"demo-simple-select\"\n                            value={epochs}\n                            onChange={(e) => { setEpochs(e.target.value); }}\n                        >\n                            <MenuItem value={25}>25</MenuItem>\n                            <MenuItem value={50}>50</MenuItem>\n                            <MenuItem value={75}>75</MenuItem>\n                            <MenuItem value={100}>100</MenuItem>\n                        </Select>\n                    </Grid>\n                </Grid>\n            </Paper>\n        </div>\n    );\n}\n\nexport default Train;","/Users/gamemaster/Documents/Projects/custom_image_classification/frontend/src/pages/Image_Classification/CICG/components/class.js",[],"/Users/gamemaster/Documents/Projects/custom_image_classification/frontend/src/pages/Image_Classification/CICG/components/dragAndDrop.js",[],["131","132"],"/Users/gamemaster/Documents/Projects/custom_image_classification/frontend/src/pages/Image_Classification/DogCat/App.js",["133"],"import React, { useState, useEffect, useRef } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { Divider, Grid, Typography, Button, LinearProgress, Snackbar } from '@material-ui/core';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport Axios from '../../../Axios';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        padding: '18vh',\n    },\n    paper: {\n        backgroundColor: '#fff',\n        padding: '20px',\n    },\n    evaluateButton: {\n        backgroundColor: '#4285F4',\n        color: '#fff',\n        width: '50%',\n        textTransform: 'none',\n        '&:hover': {\n            backgroundColor: '#4285F4',\n        }\n    },\n    progressBar: {\n        height: '40px',\n        width: '80%',\n        float: 'left',\n        borderRadius: '5px',\n        backgroundColor: 'rgba(255,101,0,0.3)',\n        color: '#000',\n    },\n    progressBar2: {\n        height: '40px',\n        width: '80%',\n        float: 'left',\n        borderRadius: '5px',\n        backgroundColor: 'rgba(123,43,226,0.3)',\n        color: '#000',\n    }\n}));\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction DogCat() {\n    const classes = useStyles()\n    const [image, setImage] = useState();\n    const [cat, setCat] = useState(50);\n    const [dog, setDog] = useState(50);\n    const [errorSnackBarOpen, setErrorSnackBarOpen] = useState(false);\n    const [errorMsg,setErrorMsg] = useState(\"Choose image for evaluation.\");\n\n    const imageRef = useRef(null);\n\n    const theme = createMuiTheme({\n        palette: {\n            primary: {\n                main: \"rgb(255,101,0)\"\n            },\n            secondary: {\n                main: \"rgb(123,43,226)\"\n            }\n        },\n    });\n\n    const handleFileUpload = (e) => {\n        setImage(e.target.files[0]);\n    }\n\n    useEffect(() => {\n        if (!!image) {\n            let reader = new FileReader();\n\n            reader.onload = (e) => {\n                imageRef.current.src = e.target.result;\n            }\n\n            reader.readAsDataURL(image);\n        }\n    }, [image])\n\n    const handleTest = () => {\n        if (image) {\n            let reqBody = new FormData();\n            reqBody.append('image', image);\n\n            Axios.post('/api/catVSdog/evaluate', reqBody, {\n                headers: {\n                    \"Content-Type\": \"multipart/form-data\"\n                }\n            })\n                .then(res => {\n\n                    console.log(res)\n\n                    if (res.status === 200) {\n                        setCat(res.data['cat']);\n                        setDog(res.data['dog']);\n                        console.log('Successfully evaluated image');\n                    }\n                    else {\n                        setErrorMsg('Unable to evaluate the image due to server side issues.');\n                        setErrorSnackBarOpen(true);\n                        console.log(\"Failed to evaluate :(\");\n                    }\n                })\n                .catch(err => {\n                    setErrorMsg('Unable to evaluate the image due to server side issues.');\n                    setErrorSnackBarOpen(true);\n                    console.log(err);\n                })\n        }\n        else {\n            setErrorMsg('Choose image for evaluation.');\n            setErrorSnackBarOpen(true);\n        }\n    }\n\n    const handleErrorClose = (event, reason) => {\n        if (reason === 'clickaway') {\n          return;\n        }\n        setErrorSnackBarOpen(false);\n      };\n\n    return (\n        <ThemeProvider theme={theme}>\n            <div>\n                <Grid container className={classes.root} spacing={10}>\n                    <Grid item xs={1}></Grid>\n                    <Grid item xs={4}>\n                        <Paper className={classes.paper} elevation={3}>\n                            <Typography variant=\"overline\" style={{ fontSize: 'large', fontWeight: 'bolder', paddingLeft: '5%', color: '#eb0029' }} >Dog / Cat</Typography>\n                            <Divider />\n                            <div style={{ height: \"30px\" }}></div>\n                            <div style={{\n                                display: \"flex\",\n                                flexDirection: \"column\",\n                                justifyContent: \"center\"\n                            }}>\n                                <input\n                                    type='file'\n                                    accept=\"image/*\"\n                                    className='custom-file-input'\n                                    id='customFile'\n                                    onChange={handleFileUpload}\n                                />\n                                <div style={!image ? { display: 'none' } : { marginTop: \"10px\", textAlign: 'center', maxWidth: '100%' }}>\n                                    <img src=\"#\" ref={imageRef} alt=\"upload image here\" width=\"100%\" />\n                                </div>\n                            </div>\n                            <div style={{ height: \"30px\" }}></div>\n                            <div style={{ textAlign: \"center\" }}>\n                                <Button variant=\"outlined\" className={classes.evaluateButton} onClick={() => { handleTest() }}>TEST</Button>\n                            </div>\n                        </Paper>\n                    </Grid>\n                    <Grid item xs={5}>\n                        <Paper className={classes.paper} elevation={3}>\n                            <div style={{ height: '100px' }}>\n                                <Grid container spacing={0} style={{ height: '100%' }}>\n                                    <Grid item xs={4} style={{ paddingTop: '30px', paddingLeft: '40px' }}>\n                                        <Typography variant=\"overline\" style={{ fontSize: 'medium', fontWeight: 'bolder', color: '#eb0029' }}>Dog</Typography>\n                                    </Grid>\n                                    <Grid item xs={8} style={{ paddingTop: '30px' }}>\n                                        <LinearProgress color=\"primary\" className={classes.progressBar} variant=\"determinate\" value={parseInt(dog)} />\n                                        <Typography style={{ paddingRight: '15px', paddingTop: '5px', fontSize: 'large', fontWeight: 'bolder', color: 'rgb(255,101,0)', float: 'right' }}>{dog}%</Typography>\n                                    </Grid>\n                                </Grid>\n                            </div>\n                            <Divider />\n                            <div style={{ height: '100px' }}>\n                                <Grid container spacing={0} style={{ height: '100%' }}>\n                                    <Grid item xs={4} style={{ paddingTop: '30px', paddingLeft: '40px' }}>\n                                        <Typography variant=\"overline\" style={{ fontSize: 'medium', fontWeight: 'bolder', color: '#eb0029' }}>Cat</Typography>\n                                    </Grid>\n                                    <Grid item xs={8} style={{ paddingTop: '30px' }}>\n                                        <LinearProgress color=\"secondary\" className={classes.progressBar2} variant=\"determinate\" value={parseInt(cat)} />\n                                        <Typography style={{ paddingRight: '15px', paddingTop: '5px', fontSize: 'large', fontWeight: 'bolder', color: 'rgb(123,43,226)', float: 'right' }}>{cat}%</Typography>\n                                    </Grid>\n                                </Grid>\n                            </div>\n                        </Paper>\n                    </Grid>\n                </Grid>\n                <Snackbar open={errorSnackBarOpen} autoHideDuration={3000} onClose={handleErrorClose}>\n                    <Alert onClose={handleErrorClose} severity=\"error\">\n                        {errorMsg}\n                    </Alert>\n                </Snackbar>\n            </div>\n        </ThemeProvider>\n    );\n}\n\nexport default DogCat;","/Users/gamemaster/Documents/Projects/custom_image_classification/frontend/src/pages/Image_Classification/RickMorty/App.js",["134"],"import React, { useState, useEffect, useRef } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { Divider, Grid, Typography, Snackbar, Button, LinearProgress } from '@material-ui/core';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport Axios from '../../../Axios';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        padding: '18vh',\n    },\n    paper: {\n        backgroundColor: '#fff',\n        padding: '20px',\n    },\n    evaluateButton: {\n        backgroundColor: '#4285F4',\n        color: '#fff',\n        width: '50%',\n        textTransform: 'none',\n        '&:hover': {\n            backgroundColor: '#4285F4',\n        }\n    },\n    progressBar: {\n        height: '40px',\n        width: '80%',\n        float: 'left',\n        borderRadius: '5px',\n        backgroundColor: 'rgba(255,101,0,0.3)',\n        color: '#000',\n    },\n    progressBar2: {\n        height: '40px',\n        width: '80%',\n        float: 'left',\n        borderRadius: '5px',\n        backgroundColor: 'rgba(123,43,226,0.3)',\n        color: '#000',\n    }\n}));\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction RickMorty() {\n    const classes = useStyles()\n    const [image, setImage] = useState();\n    const [rick, setRick] = useState(50);\n    const [morty, setMorty] = useState(50);\n    const [errorSnackBarOpen, setErrorSnackBarOpen] = useState(false);\n    const [errorMsg,setErrorMsg] = useState(\"Choose image for evaluation.\");\n\n    const imageRef = useRef(null);\n\n    const theme = createMuiTheme({\n        palette: {\n            primary: {\n                main: \"rgb(255,101,0)\"\n            },\n            secondary: {\n                main: \"rgb(123,43,226)\"\n            }\n        },\n    });\n\n    const handleFileUpload = (e) => {\n        setImage(e.target.files[0]);\n    }\n\n    useEffect(() => {\n        if (!!image) {\n            let reader = new FileReader();\n\n            reader.onload = (e) => {\n                imageRef.current.src = e.target.result;\n            }\n\n            reader.readAsDataURL(image);\n        }\n    }, [image]);\n\n    const handleTest = () => {\n        if (image) {\n            let reqBody = new FormData();\n            reqBody.append('image', image);\n\n            Axios.post('/api/rickVSmorty/evaluate', reqBody, {\n                headers: {\n                    \"Content-Type\": \"multipart/form-data\"\n                }\n            })\n                .then(res => {\n\n                    console.log(res)\n\n                    if (res.status === 200) {\n                        setRick(res.data['rick']);\n                        setMorty(res.data['morty']);\n                        console.log('Successfully evaluated image');\n                    }\n                    else {\n                        setErrorMsg('Unable to evaluate the image due to server side issues.');\n                        setErrorSnackBarOpen(true);\n                        console.log(\"Failed to evaluate :(\");\n                    }\n                })\n                .catch(err => {\n                    setErrorMsg('Unable to evaluate the image due to server side issues.');\n                    setErrorSnackBarOpen(true);\n                    console.log(err);\n                })\n        }\n        else {\n            setErrorMsg('Choose image for evaluation.');\n            setErrorSnackBarOpen(true);\n        }\n    }\n\n    const handleErrorClose = (event, reason) => {\n        if (reason === 'clickaway') {\n          return;\n        }\n        setErrorSnackBarOpen(false);\n      };\n\n    return (\n        <ThemeProvider theme={theme}>\n            <div>\n                <Grid container className={classes.root} spacing={10}>\n                    <Grid item xs={1}></Grid>\n                    <Grid item xs={4}>\n                        <Paper className={classes.paper} elevation={3}>\n                            <Typography variant=\"overline\" style={{ fontSize: 'large', fontWeight: 'bolder', paddingLeft: '5%', color: '#eb0029' }} >Rick / Morty</Typography>\n                            <Divider />\n                            <div style={{ height: \"30px\" }}></div>\n                            <div style={{\n                                display: \"flex\",\n                                flexDirection: \"column\",\n                                justifyContent: \"center\"\n                            }}>\n                                <input\n                                    type='file'\n                                    accept=\"image/*\"\n                                    className='custom-file-input'\n                                    id='customFile'\n                                    onChange={handleFileUpload}\n                                />\n                                <div style={!image ? { display: 'none' } : { marginTop: \"10px\", textAlign: 'center', maxWidth: '100%' }}>\n                                    <img src=\"#\" ref={imageRef} alt=\"upload image here\" width=\"100%\" />\n                                </div>\n                            </div>\n                            <div style={{ height: \"30px\" }}></div>\n                            <div style={{ textAlign: \"center\" }}>\n                                <Button variant=\"outlined\" className={classes.evaluateButton} onClick={() => { handleTest() }}>TEST</Button>\n                            </div>\n                        </Paper>\n                    </Grid>\n                    <Grid item xs={5}>\n                        <Paper className={classes.paper} elevation={3}>\n                            <div style={{ height: '100px' }}>\n                                <Grid container spacing={0} style={{ height: '100%' }}>\n                                    <Grid item xs={4} style={{ paddingTop: '30px', paddingLeft: '40px' }}>\n                                        <Typography variant=\"overline\" style={{ fontSize: 'medium', fontWeight: 'bolder', color: '#eb0029' }}>Rick</Typography>\n                                    </Grid>\n                                    <Grid item xs={8} style={{ paddingTop: '30px' }}>\n                                        <LinearProgress color=\"primary\" className={classes.progressBar} variant=\"determinate\" value={parseInt(rick)} />\n                                        <Typography style={{ paddingRight: '15px', paddingTop: '5px', fontSize: 'large', fontWeight: 'bolder', color: 'rgb(255,101,0)', float: 'right' }}>{rick}%</Typography>\n                                    </Grid>\n                                </Grid>\n                            </div>\n                            <Divider />\n                            <div style={{ height: '100px' }}>\n                                <Grid container spacing={0} style={{ height: '100%' }}>\n                                    <Grid item xs={4} style={{ paddingTop: '30px', paddingLeft: '40px' }}>\n                                        <Typography variant=\"overline\" style={{ fontSize: 'medium', fontWeight: 'bolder', color: '#eb0029' }}>Morty</Typography>\n                                    </Grid>\n                                    <Grid item xs={8} style={{ paddingTop: '30px' }}>\n                                        <LinearProgress color=\"secondary\" className={classes.progressBar2} variant=\"determinate\" value={parseInt(morty)} />\n                                        <Typography style={{ paddingRight: '15px', paddingTop: '5px', fontSize: 'large', fontWeight: 'bolder', color: 'rgb(123,43,226)', float: 'right' }}>{morty}%</Typography>\n                                    </Grid>\n                                </Grid>\n                            </div>\n                        </Paper>\n                    </Grid>\n                </Grid>\n                <Snackbar open={errorSnackBarOpen} autoHideDuration={3000} onClose={handleErrorClose}>\n                    <Alert onClose={handleErrorClose} severity=\"error\">\n                        {errorMsg}\n                    </Alert>\n                </Snackbar>\n            </div>\n        </ThemeProvider>\n    );\n}\n\nexport default RickMorty;","/Users/gamemaster/Documents/Projects/custom_image_classification/frontend/src/pages/Object_Detection/App.js",["135"],"import React, { useState, useEffect, useRef } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { Divider, Grid, Typography, Button, Snackbar} from '@material-ui/core';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport Axios from '../../Axios';\nimport './App.css';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        padding: '18vh',\n    },\n    paper: {\n        backgroundColor: '#fff',\n        padding: '20px',\n    },\n    evaluateButton: {\n        backgroundColor: '#4285F4',\n        color: '#fff',\n        width: '50%',\n        textTransform: 'none',\n        '&:hover': {\n            backgroundColor: '#4285F4',\n        }\n    },\n}));\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction Object_Detection() {\n    const classes = useStyles()\n    const [image, setImage] = useState();\n    const [detected, setDetected] = useState();\n    const [errorSnackBarOpen, setErrorSnackBarOpen] = useState(false);\n    const [errorMsg, setErrorMsg] = useState(\"Choose image for evaluation.\");\n\n    const imageRef = useRef(null);\n\n\n    const handleFileUpload = (e) => {\n        setImage(e.target.files[0]);\n    }\n\n    useEffect(() => {\n        if (!!image) {\n            let reader = new FileReader();\n\n            reader.onload = (e) => {\n                imageRef.current.src = e.target.result;\n            }\n\n            reader.readAsDataURL(image);\n        }\n    }, [image])\n\n    const imageDisplay = () => {\n        if (detected) {\n            return (\n                <div style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"center\"\n                }}>\n                    <div style={{ textAlign: 'center' }}>\n                        <img src={detected} alt=\"\" width=\"100%\" />\n                    </div>\n                </div>\n            )\n        }\n        else {\n            return (\n                <div className=\"note\">\n                    After Object Detection, Detected Image with labels in form of boxes will be displayed here.\n                </div>\n            )\n        }\n    }\n\n    const handleDetect = () => {\n        setDetected(\"\");\n        if (image) {\n            let reqBody = new FormData();\n            reqBody.append('image', image);\n\n            Axios.post('/api/object_detection/detect', reqBody, {\n                headers: {\n                    \"Content-Type\": \"multipart/form-data\"\n                }\n            })\n                .then(res => {\n\n                    console.log(res)\n\n                    setDetected('http://127.0.0.1:5000/detected_images/'+res.data['result'])\n\n                    if (res.status === 200) {\n                        console.log('Successfully detected Objects');\n                    }\n                    else {\n                        setErrorMsg('Unable to detect objects in image, due to server side issues.');\n                        setErrorSnackBarOpen(true);\n                        console.log(\"Failed to evaluate :(\");\n                    }\n                })\n                .catch(err => {\n                    setErrorMsg('Unable to detect objects in image, due to server side issues.');\n                    setErrorSnackBarOpen(true);\n                    console.log(err);\n                })\n            \n            \n        }\n        else {\n            setErrorMsg('Choose image for evaluation.');\n            setErrorSnackBarOpen(true);\n        }\n    }\n\n    const handleErrorClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setErrorSnackBarOpen(false);\n    };\n\n    return (\n        <div>\n            <Grid container className={classes.root} spacing={10}>\n                <Grid item xs={4}>\n                    <Paper className={classes.paper} elevation={3}>\n                        <Typography variant=\"overline\" style={{ fontSize: 'large', fontWeight: 'bolder', paddingLeft: '5%', color: '#eb0029' }} >Object Detection</Typography>\n                        <Divider />\n                        <div style={{ height: \"30px\" }}></div>\n                        <div style={{\n                            display: \"flex\",\n                            flexDirection: \"column\",\n                            justifyContent: \"center\"\n                        }}>\n                            <input\n                                type='file'\n                                accept=\"image/*\"\n                                className='custom-file-input'\n                                id='customFile'\n                                onChange={handleFileUpload}\n                            />\n                            <div style={!image ? { display: 'none' } : { marginTop: \"10px\", textAlign: 'center', maxWidth: '100%' }}>\n                                <img src=\"#\" ref={imageRef} alt=\"upload image here\" width=\"100%\" />\n                            </div>\n                        </div>\n                        <div style={{ height: \"30px\" }}></div>\n                        <div style={{ textAlign: \"center\" }}>\n                            <Button variant=\"outlined\" className={classes.evaluateButton} onClick={() => { handleDetect() }}>DETECT</Button>\n                        </div>\n                    </Paper>\n                </Grid>\n                <Grid item xs={8}>\n                    <Paper className={classes.paper} style={{textAlign: 'center'}} elevation={3}>\n                        <Typography variant=\"overline\" style={{ fontSize: 'large', fontWeight: 'bolder', paddingLeft: '5%', color: '#eb0029' }} >Detected Image</Typography>\n                        <Divider />\n                        {imageDisplay()}\n                    </Paper>\n                </Grid>\n            </Grid>\n            <Snackbar open={errorSnackBarOpen} autoHideDuration={3000} onClose={handleErrorClose}>\n                <Alert onClose={handleErrorClose} severity=\"error\">\n                    {errorMsg}\n                </Alert>\n            </Snackbar>\n        </div>\n    );\n}\n\nexport default Object_Detection;","/Users/gamemaster/Documents/Projects/custom_image_classification/frontend/src/Axios.ts",[],"/Users/gamemaster/Documents/Projects/MegaMLProject/frontend/src/index.js",[],"/Users/gamemaster/Documents/Projects/MegaMLProject/frontend/src/main.js",[],"/Users/gamemaster/Documents/Projects/MegaMLProject/frontend/src/reportWebVitals.js",[],"/Users/gamemaster/Documents/Projects/MegaMLProject/frontend/src/pages/Object_Detection/App.js",["136"],"/Users/gamemaster/Documents/Projects/MegaMLProject/frontend/src/pages/Image_Classification/index.js",[],"/Users/gamemaster/Documents/Projects/MegaMLProject/frontend/src/pages/Image_Classification/DogCat/App.js",["137"],"/Users/gamemaster/Documents/Projects/MegaMLProject/frontend/src/pages/Image_Classification/RickMorty/App.js",["138"],"/Users/gamemaster/Documents/Projects/MegaMLProject/frontend/src/pages/Image_Classification/CICG/CICG.tsx",["139"],"/Users/gamemaster/Documents/Projects/MegaMLProject/frontend/src/Axios.ts",[],"/Users/gamemaster/Documents/Projects/MegaMLProject/frontend/src/pages/Image_Classification/CICG/components/class.js",[],"/Users/gamemaster/Documents/Projects/MegaMLProject/frontend/src/pages/Image_Classification/CICG/components/train.js",["140"],"/Users/gamemaster/Documents/Projects/MegaMLProject/frontend/src/pages/Image_Classification/CICG/components/addClass.js",[],"/Users/gamemaster/Documents/Projects/MegaMLProject/frontend/src/pages/Image_Classification/CICG/components/evaluate.js",["141"],"/Users/gamemaster/Documents/Projects/MegaMLProject/frontend/src/pages/Image_Classification/CICG/components/dragAndDrop.js",[],{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","severity":1,"message":"147","line":158,"column":25,"nodeType":"148","messageId":"149","endLine":158,"endColumn":27},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"150","severity":1,"message":"151","line":120,"column":8,"nodeType":"152","endLine":120,"endColumn":23,"suggestions":"153"},{"ruleId":"146","severity":1,"message":"147","line":29,"column":29,"nodeType":"148","messageId":"149","endLine":29,"endColumn":31},{"ruleId":"142","replacedBy":"154"},{"ruleId":"144","replacedBy":"155"},{"ruleId":"156","severity":1,"message":"157","line":153,"column":37,"nodeType":"158","endLine":153,"endColumn":104},{"ruleId":"156","severity":1,"message":"157","line":153,"column":37,"nodeType":"158","endLine":153,"endColumn":104},{"ruleId":"156","severity":1,"message":"157","line":150,"column":33,"nodeType":"158","endLine":150,"endColumn":100},{"ruleId":"156","severity":1,"message":"157","line":150,"column":33,"nodeType":"158","endLine":150,"endColumn":100},{"ruleId":"156","severity":1,"message":"157","line":153,"column":37,"nodeType":"158","endLine":153,"endColumn":104},{"ruleId":"156","severity":1,"message":"157","line":153,"column":37,"nodeType":"158","endLine":153,"endColumn":104},{"ruleId":"146","severity":1,"message":"147","line":158,"column":25,"nodeType":"148","messageId":"149","endLine":158,"endColumn":27},{"ruleId":"146","severity":1,"message":"147","line":29,"column":29,"nodeType":"148","messageId":"149","endLine":29,"endColumn":31},{"ruleId":"150","severity":1,"message":"151","line":120,"column":8,"nodeType":"152","endLine":120,"endColumn":23,"suggestions":"159"},"no-native-reassign",["160"],"no-negated-in-lhs",["161"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'info'. Either include it or remove the dependency array.","ArrayExpression",["162"],["160"],["161"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",["163"],"no-global-assign","no-unsafe-negation",{"desc":"164","fix":"165"},{"desc":"164","fix":"166"},"Update the dependencies array to be: [info, isDisplayInfo]",{"range":"167","text":"168"},{"range":"169","text":"168"},[3732,3747],"[info, isDisplayInfo]",[3732,3747]]